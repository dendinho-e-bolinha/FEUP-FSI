from Crypto.Util.number import inverse
from binascii import hexlify, unhexlify

p = 2**512 + 75 # next prime 2**512
q = 2**513 + 159 # next prime 2**513
n = p*q
e = 0x10001 # a constant
d = inverse(e, (p-1)*(q-1)) # a number such that d*e % ((p-1)*(q-1)) = 1

enc_flag = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000820d3c5da7ff59968113053da78cd38bee1cbb62923efbb2931e19ce084d5cfb7e4c8692cea5a37e1c03edce9b1231c3a4f1de0e1351e9ca77b08e7137030e4da0f61be82370a3e49a5c020de7fb21d656088b1f297c5abd112948e32540d785627f263e3ff8d45549522e994a9f9688a6f821f7a49450aa93f8ffa299091a52"

def enc(x):
	int_x = int.from_bytes(x, "big")
	y = pow(int_x,e,n)
	return hexlify(y.to_bytes(256, 'big'))

def dec(y):
	int_y = int.from_bytes(unhexlify(y), "big")
	x = pow(int_y,d,n)
	return x.to_bytes(256, 'big')

y = dec(enc_flag)
print(y.decode())