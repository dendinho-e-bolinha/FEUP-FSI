from binascii import unhexlify

# Values provided when connecting to the challenge server
msg1 = "936155aba2fa232773f83c183c23bc2c57e2402e197b88c6b3f0bf299d9b370441466e92acaa7f7e70c41c4da9f2a3889261d981badc799a0bd1c6d914fef5a7587263bc8ec5fa0502580156191e99cc5580b0f41f6433d013e6d68594c2fc3498b2f7dacd18918d100b797d37415fbaa93ab4cd25f0daec27c69deb01939119376eb6733be8513f88b2237ffbd4b07bfe7a95bd4871849b676bb6d9072ab1e6802a58e43ca1041407404b41d53ea9d36a425ea04014f05542b67df46c7b2a3cdc5fd7798014c89c97b349a489a8a9caf7331a0c18c061abcfb70c509c5b6e5c61b0c59dfb308cc0bc3875ab6dbedf301891c33392741bfb1d2ea391b68a6818"
msg2 = "893fa4c8fb75ab154e4e590cc468128203f48c97c94728035511cea7127575c9b2589f60072ddae7dec2e1a341db5f7226d0818b055db115b7d4d246647f57af466fb580219111cfed1679589020f2f10543db2d9123d379824d6b72084123decc9e2aaf55161155763e36b7031ce2f1b088a5c4850fc6484ee5ee8fce2aa81e8f4f4cf3be4e9ff5f44b87173bb5ae3ca31603d630c09feece6469d975888dc2d0b54790a97f2c0a25cdb84b2c6bc11616156fc8dddcbbc64be0507d606d3a162c96b8b6e38358e08709a00602a5239b0095e4f27690d45e3edbd942782dc862b3b59b10cc9ed3383914725adabff945afdf39739eda9dd6bb0db3f1bcf80386"

# Values provided in the challenge statement
n = 29802384007335836114060790946940172263849688074203847205679161119246740969024691447256543750864846273960708438254311566283952628484424015493681621963467820718118574987867439608763479491101507201581057223558989005313208698460317488564288291082719699829753178633499407801126495589784600255076069467634364857018709745459288982060955372620312140134052685549203294828798700414465539743217609556452039466944664983781342587551185679334642222972770876019643835909446132146455764152958176465019970075319062952372134839912555603753959250424342115581031979523075376134933803222122260987279941806379954414425556495125737356327411
e1 = 0x10001
e2 = 0x10003

def gcdExtended(a, b): # Extended Euclidean Algorithm
    # Base Case
    if a == 0 :
        return b,0,1
            
    gcd, x1, y1 = gcdExtended(b % a, a)
    
    # Update x and y using results of recursive
    # call
    x = y1 - (b // a) * x1
    y = x1
    
    return gcd, x, y

gcd, x, y = gcdExtended(e1, e2)
assert gcd == 1 # Ensure that all assumptions are met before attempting to decrypt flag

# Convert hex messages to ints so we can perform arithmetic operations with them
int1 = int.from_bytes(unhexlify(msg1), "big")
int2 = int.from_bytes(unhexlify(msg2), "big")

decrypted_msg = (pow(int1, x, n) * pow(int2, y, n)) % n # msg = C1^x * C2^y (mod n)
print(decrypted_msg.to_bytes(256, "big").decode()) # Convert the message obtained to a string