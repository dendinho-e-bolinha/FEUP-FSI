# Python Module ciphersuite
import os
import sys
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from binascii import hexlify, unhexlify

ENC_FLAG = "a231b3b9dd2307e9773b68811eacfff4b918f67baa97b460c51a6fe10aa0af8cdc271a2330a82c0140dd036894ed6db39da9b05f1c1878eba0893dd4f3fdd94483b1fb76941480b876d64a15930b62e258f84055dfacab10cec988e1a7e39657a231b3b9dd2307e9773b68811eacfff46e5ced2008a3a5072f8ec94e8e7805c6f6f906e53745176641ccb6ad6caaadb5dc271a2330a82c0140dd036894ed6db3b21eda33808c124d2ded39960d1b7ff998b7514bc88459f1f356b2f37ccd892a58f84055dfacab10cec988e1a7e3965777c2ea252620c8647247a3ac386e1dd102308d773b98789533ac66a366991bcee6d14630410a28f61f2ddc5a4ed4f59202308d773b98789533ac66a366991bce77c2ea252620c8647247a3ac386e1dd13b655422ee1229ac77cec9e10b2083f66e5ced2008a3a5072f8ec94e8e7805c64d5b106c2667e22cced8d07179c6032258f84055dfacab10cec988e1a7e3965777c2ea252620c8647247a3ac386e1dd1dc271a2330a82c0140dd036894ed6db34d5b106c2667e22cced8d07179c6032298b7514bc88459f1f356b2f37ccd892a4d5b106c2667e22cced8d07179c6032298b7514bc88459f1f356b2f37ccd892a77c2ea252620c8647247a3ac386e1dd102308d773b98789533ac66a366991bce98b7514bc88459f1f356b2f37ccd892a6e5ced2008a3a5072f8ec94e8e7805c63b655422ee1229ac77cec9e10b2083f6b21eda33808c124d2ded39960d1b7ff998b7514bc88459f1f356b2f37ccd892aacd1f0b8e0b3c1801b71eb02bd5b134202308d773b98789533ac66a366991bce8a87cc925ad2e7dfba0003f3881973a6060cca40ab8f04e5479ebecc2c69ba81"

# Reverse operation
def dec(k, c):
	assert len(c) % 16 == 0
	cipher = Cipher(algorithms.AES(k), modes.ECB())
	decryptor = cipher.decryptor()
	blocks = len(c)//16
	msg = b""
	for i in range(0,(blocks)):
		msg+=decryptor.update(c[i*16:(i+1)*16])
		msg=msg[:-15]
	msg += decryptor.finalize()
	return msg

masks = [2**i for i in range(0, 16)]
for possible_key in range(0, 2**16):
    key = [0] * 16
    for i in range(0, 16):
        if possible_key & masks[i]:
            key[i] = 1
    key = bytes(key)
    try:
        flag_bytes = b'flag'
        dec_bytes = dec(key, unhexlify(ENC_FLAG))
        if flag_bytes in dec_bytes:
            print(dec_bytes.decode())
    except:
        pass